#include "ros/ros.h"
#include <std_msgs/Float64.h>
#include <geometry_msgs/Pose.h>
#include <gazebo_msgs/LinkStates.h>
#include <math.h>

const float foot_mass = 5*0.2;
const float lowerleg_mass = 5*0.15;
const float upperleg_mass = 5*0.65;
const float body_mass = 25;

void comCallback(const gazebo_msgs::LinkStates::ConstPtr& msg)
{
  
  ros::NodeHandle n;
  
  float com_x;
  float x_feet, x_lowerleg, x_upperleg, x_body;

  x_feet = msg->pose[4].position.x+msg->pose[7].position.x+msg->pose[10].position.x+msg->pose[13].position.x;
  x_lowerleg = msg->pose[3].position.x+msg->pose[6].position.x+msg->pose[9].position.x+msg->pose[12].position.x;
  x_upperleg = msg->pose[2].position.x+msg->pose[5].position.x+msg->pose[8].position.x+msg->pose[11].position.x;
  x_body = msg->pose[1].position.x;

  com_x = (x_feet*foot_mass + x_lowerleg*lowerleg_mass + x_upperleg*upperleg_mass + x_body*body_mass)/(foot_mass*4+lowerleg_mass*4+upperleg_mass*4+body_mass);

  ROS_INFO("COM_X = %f", com_x);
  ROS_INFO("Body_X = %f", x_body);

float com_y;
  float y_feet, y_lowerleg, y_upperleg, y_body;

  y_feet = msg->pose[4].position.y+msg->pose[7].position.y+msg->pose[10].position.y+msg->pose[13].position.y;
  y_lowerleg = msg->pose[3].position.y+msg->pose[6].position.y+msg->pose[9].position.y+msg->pose[12].position.y;
  y_upperleg = msg->pose[2].position.y+msg->pose[5].position.y+msg->pose[8].position.y+msg->pose[11].position.y;
  y_body = msg->pose[1].position.y;

  com_y = (y_feet*foot_mass + y_lowerleg*lowerleg_mass + y_upperleg*upperleg_mass + y_body*body_mass)/(foot_mass*4+lowerleg_mass*4+upperleg_mass*4+body_mass);

  ROS_INFO("COM_Y = %f", com_y);
  ROS_INFO("Body_Y = %f", y_body);

  //ros::spinOnce();
  
}

int main(int argc, char **argv)
{

  ros::init(argc, argv, "com");
 
  ros::NodeHandle n;

  //ros::Publisher lb_ankle_pub = n.advertise<std_msgs::Float64>("quadruped/lb_ankle_position_controller/command", 1000);
  
  ros::Subscriber sub = n.subscribe("gazebo/link_states/", 1000, comCallback);

  ros::spin();

  return 0;
}
